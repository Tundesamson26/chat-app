/* eslint-disable react-hooks/exhaustive-deps */
/* global localStorage */
/* eslint-disable react/jsx-key */
/* eslint-disable @next/next/no-page-custom-font */
/* eslint-disable @next/next/google-font-display */
/* eslint-disable @next/next/no-css-tags */
import Head from "next/head";
import { useState, useEffect } from "react";
import { sdk, createAnonymousSession } from "../utils/web-init";
import { generateUsername } from "unique-username-generator";

let typing_timeout;

export default function Home() {
  const [username, setUsername] = useState("");
  const [typers, setTypers] = useState([]);
  const [messages, setMessages] = useState([]);
  const [message, setMessage] = useState("");

  const createChatIfNotExist = () => {
    let promise = sdk.database.getDocument("chatCollection", "general-chat");

    promise.then(
      function (response) {
        console.log("Response", response); // Success
        setTypers(JSON.parse(response.is_typing));
      },
      function (error) {
        console.log("Error", error); // Failure
        sdk.database.createDocument("chatCollection", "general-chat", {
          is_typing: JSON.stringify(typers),
        });
      }
    );
  };

  useEffect(() => {
    if (!username) {
      const _username = localStorage.getItem("username") || generateUsername();
      localStorage.setItem("username", _username);
      setUsername(_username);
    }
  }, [username]);

  useEffect(() => {
    createChatIfNotExist();
    // Subscribe to collection channel
    const _subscribe = sdk.subscribe(
      "collections.chatCollection.documents",
      (response) => {
        const { payload } = response;
        if (payload?.$id === "general-chat") {
          setTypers(JSON.parse(payload.is_typing));
        }
      }
    );
    return () => {
      _subscribe();
    };
  }, []);

  const writeMessage = (e) => {
    clearTimeout(typing_timeout);
    typing_timeout = setTimeout(() => {
      if (typers.includes(username)) return;

      let promise = sdk.database.updateDocument(
        "chatCollection",
        "general-chat",
        {
          is_typing: JSON.stringify([...typers, username]),
        }
      );

      promise.then(
        function (response) {
          console.log(response); // Success
        },
        function (error) {
          console.log(error); // Failure
        }
      );
    }, 200);
  };

  const handleBlur = () => {
    let promise = sdk.database.updateDocument(
      "chatCollection",
      "general-chat",
      {
        is_typing: JSON.stringify(typers.filter((e) => e !== username)),
      }
    );

    promise.then(
      function (response) {
        console.log(response); // Success
      },
      function (error) {
        console.log(error); // Failure
      }
    );
  };

  useEffect(() => {
    createAnonymousSession();
  }, []);

  return (
    <div className="container">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css"
          rel="stylesheet"
          integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor"
          crossOrigin="anonymous"
        />
        <link
          href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400,600,700,900,200italic,300italic,400italic,600italic,700italic,900italic"
          rel="stylesheet"
          type="text/css"
        />
        <link rel="stylesheet" href="/css/style.css" />
      </Head>

      <div className="chat_window">
        <div className="top_menu">
          <div className="is_typing">
            {typers.length > 0
              ? typers.map((username) => (
                  <em style={{ display: "block" }}>{username} is typing</em>
                ))
              : null}
          </div>
          <div className="title"> Chat App</div>
        </div>

        <ul className="messages">
          {messages.map((message) => {
            return (
              <li className="message">
                <div className="message_wrapper">
                  <div className="text">{message.message}</div>
                </div>
              </li>
            );
          })}
        </ul>

        <div className="input bottom_wrapper clearfix">
          {/* <br /> */}
          <div className="message_input_wrapper">
            <input
              id="message-text-field"
              className="message_input"
              placeholder="Type your message here..."
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyPress={writeMessage}
              onBlur={handleBlur}
            />
          </div>
          <button id="send-button" className="send_message">
            <div className="text">Send</div>
          </button>
        </div>
      </div>
    </div>
  );
}
